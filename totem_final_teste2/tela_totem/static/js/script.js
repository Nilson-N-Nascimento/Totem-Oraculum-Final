/**
 * Oraculum Interativo - Bel√©m COP 30
 * Vers√£o Refatorada com APIs e Conte√∫do
 * 
 * üö® CORRE√á√ïES DE SEGURAN√áA APLICADAS:
 * ‚úÖ Chave API removida do frontend por seguran√ßa
 * ‚úÖ Modelo atualizado para gemini-1.5-flash (gemini-pro descontinuado)
 * ‚úÖ Logs de seguran√ßa removidos
 * ‚úÖ Rate limiting implementado
 * ‚úÖ Fallback inteligente melhorado
 * ‚úÖ Modo demonstra√ß√£o ativo
 * 
 * ‚ö†Ô∏è PR√ìXIMOS PASSOS RECOMENDADOS:
 * 1. Criar endpoint no backend Django para proxy da API
 * 2. Configurar nova chave API no Google Cloud Console
 * 3. Implementar autentica√ß√£o no backend
 * 4. Ativar modo API quando backend estiver pronto
 * 
 * üí° ALERTA DE SEGURAN√áA: Este script utiliza sistema de fallback local
 * para demonstra√ß√£o. Para produ√ß√£o, integre com backend seguro.
 */

// ===========================================
// M√ìDULO DE CONFIGURA√á√ÉO E SERVI√áOS DE API
// ===========================================
const ApiService = (() => {
    // URL para converter o feed de not√≠cias do G1 Par√° para JSON. Servi√ßo gratuito e sem chave.
    const G1_PARA_RSS_URL = 'https://api.rss2json.com/v1/api.json?rss_url=https%3A%2F%2Fg1.globo.com%2Frss%2Fg1%2Fpa%2F';

    // API de tradu√ß√£o gratuita e sem chave (mantida do script original).
    const MYMEMORY_TRANSLATE_URL = 'https://api.mymemory.translated.net/get';

    // Fun√ß√£o para buscar not√≠cias
    const fetchNews = async () => {
        try {
            const response = await fetch(G1_PARA_RSS_URL);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            const data = await response.json();
            if (data.status !== 'ok' || !Array.isArray(data.items)) throw new Error('RSS feed could not be loaded.');
            // Formata os dados da API para o padr√£o do nosso app
            return data.items.slice(0, 10).map(item => ({
                title: item.title,
                link: item.link,
                pubDate: new Date(item.pubDate).toLocaleDateString('pt-BR'),
                thumbnail: item.thumbnail,
                description: item.description.replace(/<[^>]*>?/gm, '').substring(0, 120) + '...' // Limpa HTML e limita a descri√ß√£o
            }));
        } catch (error) {
            console.error('Erro ao buscar not√≠cias:', error);
            return []; // Retorna um array vazio em caso de erro
        }
    };

    // Fun√ß√£o para buscar tradu√ß√µes
    const fetchTranslation = async (text, targetLang) => {
        const url = `${MYMEMORY_TRANSLATE_URL}?q=${encodeURIComponent(text)}&langpair=pt|${targetLang}`;
        const response = await fetch(url);
        const data = await response.json();
        if (data.responseStatus === 200) {
            return data.responseData.translatedText;
        }
        throw new Error('Translation failed');
    };

    return {
        fetchNews,
        fetchTranslation
    };
})();


// ===========================================
// M√ìDULO DE DADOS (AGORA DIN√ÇMICO E COM CACHE)
// ===========================================
const DataModule = (() => {
    let cachedModules = null; // Cache para evitar m√∫ltiplas buscas

    // Dados que s√£o locais (simulando uma API)
    const staticModulesData = {
        'pontos-turisticos': {
            id: 'pontos-turisticos',
            icone: 'fa-solid fa-landmark',
            bg: 'https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjnD7sHk-SngUsHBi4A4xWKGz7wk6-w9BVQ_twiNlNs6NyU-NCghPLrsEGrtpB-B7LrsXqs88JstcgvHqO4GKiC1Qp75g0DF1zyNJSS__CGP2pdExyncnjA5i7DoVA60yru3TlnuyrKkR9P/s1600/Theatro+da+Paz_Eliseu+Dias+%25281%2529+-+SECOM+-+Ag.+Par%25C3%25A1.JPG',
            titulo: 'Pontos Tur√≠sticos',
            desc: 'Mergulhe na hist√≥ria e cultura de Bel√©m. Descubra locais ic√¥nicos e suas hist√≥rias fascinantes. Toque em um local para ver no mapa.',
            items: [{
                title: 'Mercado Ver-o-Peso',
                image: 'https://www.gov.br/casacivil/pt-br/assuntos/noticias/2024/julho/equipe-da-secretaria-extraordinaria-para-a-cop30-visita-obras-do-mercado-ver-o-peso-em-belem/veropeso-expedicao-para.jpg',
                description: 'A maior feira ao ar livre da Am√©rica Latina, um mosaico de cores, cheiros e sabores da Amaz√¥nia.',
                link: 'https://www.google.com/maps/search/?api=1&query=Mercado+Ver-o-Peso+Bel√©m'
            }, {
                title: 'Theatro da Paz',
                image: 'https://s2-g1.glbimg.com/r0V33GXt-hc0kivnKy4m09g8Ows=/1200x/smart/filters:cover():strip_icc()/i.s3.glbimg.com/v1/AUTH_59edd422c0c84a879bd37670ae4f538a/internal_photos/bs/2019/z/0/B5yHKcTBAC7kAAB329UQ/pa.jpg',
                description: 'Um deslumbrante teatro de √≥pera do s√©culo XIX, com arquitetura neocl√°ssica e programa√ß√£o cultural rica.',
                link: 'https://www.google.com/maps/search/?api=1&query=Theatro+da+Paz+Bel√©m'
            }, {
                title: 'Mangal das Gar√ßas',
                image: 'https://dynamic-media-cdn.tripadvisor.com/media/photo-o/06/64/46/45/mangal-das-garcas.jpg?w=900&h=500&s=1',
                description: 'Um o√°sis verde no centro da cidade, com aves, borbolet√°rio e uma vista panor√¢mica de Bel√©m.',
                link: 'https://www.google.com/maps/search/?api=1&query=Mangal+das+Gar√ßas+Bel√©m'
            }, {
                title: 'Esta√ß√£o das Docas',
                image: 'https://upload.wikimedia.org/wikipedia/commons/7/70/Brazil_Bel%C3%A9m_Las_Docas_02.jpg',
                description: 'Armaz√©ns portu√°rios restaurados que hoje abrigam restaurantes, lojas e um terminal fluvial, com um p√¥r do sol inesquec√≠vel.',
                link: 'https://www.google.com/maps/search/?api=1&query=Esta√ß√£o+das+Docas+Bel√©m'
            }, {
                title: 'Bas√≠lica Santu√°rio de Nazar√©',
                image: 'https://dynamic-media-cdn.tripadvisor.com/media/photo-o/11/2b/6e/8e/basilica-de-nazare.jpg',
                description: 'Monumento religioso e tamb√©m marco da f√© paraense. Sua arquitetura inspirada em bas√≠licas europeias, vitrais e interior em m√°rmore tornam o local lindo e imponente. Ponto final do famoso C√≠rio de Nazar√©.',
                link: 'https://www.google.com/maps/search/?api=1&query=Av.+Nazar√©,+1300+‚Äì+Nazar√©,+Bel√©m-PA'
            }, {
                title: 'Ilha do Combu',
                image: 'https://turismodenatureza.com.br/wp-content/uploads/2023/04/saldosa-maloca-1024x606.jpg',
                description: 'Um para√≠so natural muito perto da cidade: cheia de igarap√©s, restaurantes √† beira d\'√°gua, pousadas ribeirinhas, contato direto com a natureza e artesanato local. √ìtima para escapar um pouco do ritmo urbano.',
                link: 'https://www.google.com/maps/search/?api=1&query=Terminal+Ruy+Barata,+Pra√ßa+Princesa+Isabel,+Bel√©m-PA'
            }, {
                title: 'Cidade Velha',
                image: 'https://alepa.quartertec.com.br/Content/Portal/Fotos/2021/up_ag_6847_img-20211206-wa0072.jpg',
                description: 'Caminhar por ruas de pedra, sobradinhos antigos, fachadas coloniais e azulejos portugueses ‚Äî um mergulho no passado de Bel√©m. A Cidade Velha preserva vest√≠gios da funda√ß√£o da cidade, ideal para roteiros hist√≥ricos.',
                link: 'https://www.google.com/maps/search/?api=1&query=Cidade+Velha,+Bel√©m-PA'
            }, {
                title: 'Pra√ßa Batista Campos',
                image: 'https://dynamic-media-cdn.tripadvisor.com/media/photo-o/0d/45/9b/b6/praca-batista-campos.jpg',
                description: 'Um dos espa√ßos mais belos para relaxar e se encontrar com o p√∫blico local. Jardins bem-cuidados, coretos, lagos, pista de caminhada e clima agrad√°vel. Ideal para fins de tarde ou passeios tranquilos.',
                link: 'https://www.google.com/maps/search/?api=1&query=Pra√ßa+Batista+Campos,+Bel√©m-PA'
            }, {
                title: 'Parque da Resid√™ncia',
                image: 'https://www.agenciapara.com.br/midias/2024/2/parquedaresidenciabelemdomundo1.jpg',
                description: 'Local de lazer com natureza urbana: √°reas verdes, orquid√°rio, anfiteatro, restaurante-buffet, espa√ßo para estar com a fam√≠lia ou amigos. Excelente para momentos de descanso sem sair da cidade.',
                link: 'https://www.google.com/maps/search/?api=1&query=Av.+Magalh√£es+Barata,+830,+Bel√©m-PA'
            }]
        },
        'culinaria-regional': {
            id: 'culinaria-regional',
            icone: 'fa-solid fa-shrimp',
            bg: 'https://turismo.santarem.pa.gov.br/images/IMG_4580.jpg',
            titulo: 'Culin√°ria Regional',
            desc: 'A gastronomia paraense √© um patrim√¥nio de sabores. Desafie seu paladar com pratos aut√™nticos e ingredientes da Amaz√¥nia.',
            items: [{
                title: 'Tacac√°',
                image: 'https://tudodelicious.com/wp-content/uploads/2025/03/Tacaca-Paraense-480x270.jpeg',
                description: 'Caldo quente √† base de tucupi e goma de tapioca, servido com jambu (que amortece a boca) e camar√£o seco.'
            }, {
                title: 'Mani√ßoba',
                image: 'https://www.minhareceita.com.br/app/uploads/2025/01/R0125-manicoba-de-cogumelos-vegana-650x355-1.webp',
                description: 'Conhecida como a "feijoada paraense", √© feita com folhas mo√≠das da maniva, cozidas por sete dias com carnes de porco.'
            }, {
                title: 'A√ßa√≠ Paraense',
                image: 'https://ufpa.br/wp-content/uploads/2024/01/Acai-746x423-1.jpg',
                description: 'O verdadeiro a√ßa√≠, sem a√ß√∫car, servido tradicionalmente com farinha d\'√°gua e peixe frito ou charque.'
            }]
        },
        'hoteis-hospedagem': {
            id: 'hoteis-hospedagem',
            icone: 'fa-solid fa-bed',
            bg: 'https://images.unsplash.com/photo-1566073771259-6a8506099945?q=80&w=2070&auto=format&fit=crop',
            titulo: 'Hot√©is e Hospedagem',
            desc: 'Explore as melhores op√ß√µes de hospedagem em Bel√©m. Filtre por bairro e encontre o hotel ideal para sua estadia durante a COP 30.',
            items: [
                // Nazar√©
                {
                    title: '[Nazar√©] Grand Mercure Bel√©m do Par√°',
                    image: 'https://images.unsplash.com/photo-1542314831-068cd1dbfeeb?q=80&w=2070&auto=format&fit=crop',
                    description: 'Hotel de luxo localizado no cora√ß√£o de Nazar√©. Oferece quartos espa√ßosos, piscina, academia e restaurante gourmet.',
                    link: 'https://maps.google.com/?cid=12707567479207810590'
                },
                {
                    title: '[Nazar√©] Radisson Hotel Maiorana Jr',
                    image: 'https://images.unsplash.com/photo-1618773928121-c32242e63f39?q=80&w=2070&auto=format&fit=crop',
                    description: 'Hotel executivo com excelente localiza√ß√£o, centro de conven√ß√µes e servi√ßos de alto padr√£o.',
                    link: 'https://maps.google.com/?cid=7240872488110935040'
                },
                {
                    title: '[Nazar√©] Casa Miriti',
                    image: 'https://images.unsplash.com/photo-1578683010236-d716f9a3f461?q=80&w=2070&auto=format&fit=crop',
                    description: 'Pousada charmosa com ambiente acolhedor e decora√ß√£o regional. Caf√© da manh√£ com produtos locais.',
                    link: 'https://maps.google.com/?cid=11412879952302851930'
                },
                {
                    title: '[Nazar√©] Vila Gal√© Collection Amaz√¥nia',
                    image: 'https://images.unsplash.com/photo-1551882547-ff40c63fe5fa?q=80&w=2070&auto=format&fit=crop',
                    description: 'Resort urbano com tem√°tica amaz√¥nica, spa completo e gastronomia regional de primeira linha.',
                    link: 'https://maps.google.com/?cid=17067588425823328154'
                },
                {
                    title: '[Nazar√©] Mercure Bel√©m Boulevard',
                    image: 'https://images.unsplash.com/photo-1521783593447-5702b9bfd267?q=80&w=2070&auto=format&fit=crop',
                    description: 'Hotel moderno pr√≥ximo √†s principais atra√ß√µes. Disp√µe de business center e restaurante internacional.',
                    link: 'https://maps.google.com/?cid=15537650569185071606'
                },
                // Umarizal
                {
                    title: '[Umarizal] Bristol Umarizal Hotel',
                    image: 'https://images.unsplash.com/photo-1568084680786-a84f91d1153c?q=80&w=2070&auto=format&fit=crop',
                    description: 'Hotel contempor√¢neo no bairro do Umarizal, com √≥tima vista para o rio e caf√© da manh√£ regional.',
                    link: 'https://maps.google.com/?cid=14734251171921066651'
                },
                {
                    title: '[Umarizal] Hotel Marajoara',
                    image: 'https://images.unsplash.com/photo-1596394516093-501ba68a0ba6?q=80&w=2070&auto=format&fit=crop',
                    description: 'Hotel tradicional com localiza√ß√£o privilegiada, pr√≥ximo a restaurantes e √°rea comercial.',
                    link: 'https://maps.google.com/?cid=14583373449200182746'
                },
                {
                    title: '[Umarizal] Beira Rio Hotel',
                    image: 'https://images.unsplash.com/photo-1622396481328-7d02823a6b6a?q=80&w=2070&auto=format&fit=crop',
                    description: 'Vista panor√¢mica para a Ba√≠a do Guajar√°, quartos confort√°veis e caf√© da manh√£ t√≠pico paraense.',
                    link: 'https://maps.google.com/?cid=4926919239508656658'
                },
                // Batista Campos
                {
                    title: '[Batista Campos] Ibis Styles Bel√©m do Par√°',
                    image: 'https://images.unsplash.com/photo-1590490359854-dfba19688d70?q=80&w=2070&auto=format&fit=crop',
                    description: 'Hotel moderno e econ√¥mico em localiza√ß√£o central. Design contempor√¢neo e caf√© da manh√£ incluso.',
                    link: 'https://maps.google.com/?cid=2051945496383410672'
                },
                {
                    title: '[Batista Campos] Ibis Styles Batista Campos',
                    image: 'https://images.unsplash.com/photo-1590490360182-c33d57733427?q=80&w=2070&auto=format&fit=crop',
                    description: 'Pr√≥ximo √† Pra√ßa Batista Campos, oferece quartos funcionais e ambiente descontra√≠do.',
                    link: 'https://maps.google.com/?cid=3944473430008833912'
                },
                // Campina
                {
                    title: '[Campina] Hotel Gr√£o Par√°',
                    image: 'https://images.unsplash.com/photo-1566665797739-1674de7a421a?q=80&w=2070&auto=format&fit=crop',
                    description: 'Hotel hist√≥rico no centro comercial, pr√≥ximo ao Ver-o-Peso. Arquitetura preservada do s√©culo XIX.',
                    link: 'https://maps.google.com/?cid=17105774965698009488'
                },
                {
                    title: '[Campina] Hotel Central',
                    image: 'https://images.unsplash.com/photo-1574102097290-8e48d2a7d651?q=80&w=2070&auto=format&fit=crop',
                    description: 'Localiza√ß√£o estrat√©gica para turismo e neg√≥cios, pr√≥ximo aos principais pontos hist√≥ricos.',
                    link: 'https://maps.google.com/?cid=14191326017888746238'
                },
                // Cidade Velha
                {
                    title: '[Cidade Velha] Atrium Quinta de Pedras',
                    image: 'https://images.unsplash.com/photo-1582719508461-905c673771fd?q=80&w=1925&auto=format&fit=crop',
                    description: 'Hotel boutique em casar√£o hist√≥rico restaurado. Experi√™ncia √∫nica com vista para a Ba√≠a do Guajar√°.',
                    link: 'https://maps.google.com/?cid=7411968709892366437'
                },
                {
                    title: '[Cidade Velha] Hotel Portas da Amaz√¥nia',
                    image: 'https://images.unsplash.com/photo-1587213811864-46e59e6f5a8b?q=80&w=2070&auto=format&fit=crop',
                    description: 'Hospedagem charmosa em pr√©dio hist√≥rico, decora√ß√£o tem√°tica amaz√¥nica e caf√© regional.',
                    link: 'https://maps.google.com/?cid=2305896573021705637'
                }
            ]
        },
        'guia-turista': {
            id: 'guia-turista',
            icone: 'fa-solid fa-person-walking-luggage',
            bg: 'https://www.checkfront.com/wp-content/uploads/2022/06/tour-guide-rules.jpg',
            titulo: 'Guia do Visitante',
            desc: 'Informa√ß√µes essenciais para voc√™ explorar Bel√©m com confian√ßa e seguran√ßa. Consulte nossas dicas e aproveite sua visita ao m√°ximo.',
            items: [{
                title: 'Dicas de Seguran√ßa',
                image: 'https://images.unsplash.com/photo-1521994155325-42c380721787?q=80&w=2070&auto=format&fit=crop',
                description: 'Fique atento aos seus pertences em locais movimentados. Evite exibir objetos de valor. √Ä noite, prefira usar transportes por aplicativo ou t√°xis.'
            }, {
                title: 'Telefones √öteis',
                image: 'https://images.unsplash.com/photo-1587560699334-cc426240169f?q=80&w=2070&auto=format&fit=crop',
                description: 'Pol√≠cia Militar: 190 | SAMU (Ambul√¢ncia): 192 | Bombeiros: 193. Mantenha esses n√∫meros √† m√£o para qualquer emerg√™ncia.'
            }, {
                title: 'Transporte Sustent√°vel',
                image: 'https://images.unsplash.com/photo-1570125909239-74123iter00?q=80&w=2070&auto=format&fit=crop',
                description: 'Bel√©m incentiva o uso de transportes coletivos e bicicletas. Verifique as rotas de √¥nibus especiais para a COP30 e as esta√ß√µes de bicicletas compartilhadas pela cidade.'
            }]
        },
        'oraculum-ai': {
            id: 'oraculum-ai',
            icone: 'fa-solid fa-robot',
            bg: 'https://images.unsplash.com/photo-1677442136019-21780ecad995?q=80&w=2070&auto=format&fit=crop',
            titulo: 'Oraculum AI',
            desc: 'Tire suas d√∫vidas sobre Bel√©m do Par√° e a COP 30! Nosso assistente de IA especializado est√° aqui para ajudar voc√™ com informa√ß√µes sobre turismo, cultura e sustentabilidade na capital paraense.',
            isChatbot: true,
            items: []
        }
    };

    // Fun√ß√£o para carregar todos os m√≥dulos, combinando dados locais e da API
    const loadAllModules = async () => {
        if (cachedModules) {
            return cachedModules; // Retorna os dados do cache se j√° existirem
        }

        UIModule.toggleLoading(true, 'Carregando conte√∫do...');

        try {
            // Busca as not√≠cias da API em paralelo com a "busca" dos dados locais
            const newsPromise = ApiService.fetchNews();

            // Simula a busca dos outros m√≥dulos
            const localModulesPromise = Promise.resolve(Object.values(staticModulesData));

            const [newsItems, localModules] = await Promise.all([newsPromise, localModulesPromise]);

            const newsModule = {
                id: 'noticias-eventos',
                icone: 'fa-solid fa-bullhorn',
                bg: 'https://images.unsplash.com/photo-1504711434969-e33886168f5c?q=80&w=2070&auto=format&fit=crop',
                titulo: 'Not√≠cias e Eventos',
                desc: 'Fique por dentro de tudo que acontece em Bel√©m. Acesse as √∫ltimas not√≠cias sobre a COP 30, a agenda cultural da cidade e comunicados oficiais.',
                items: newsItems // Adiciona os itens de not√≠cia buscados da API
            };

            // Combina e ordena os m√≥dulos
            const allModules = [...localModules, newsModule].sort((a, b) => {
                const order = ['pontos-turisticos', 'culinaria-regional', 'noticias-eventos', 'guia-turista', 'hoteis-hospedagem', 'oraculum-ai'];
                return order.indexOf(a.id) - order.indexOf(b.id);
            });

            cachedModules = allModules;
            return cachedModules;

        } catch (error) {
            console.error("Erro ao carregar m√≥dulos:", error);
            UIModule.showError('N√£o foi poss√≠vel carregar o conte√∫do. Tente novamente mais tarde.');
            return []; // Retorna vazio em caso de falha geral
        } finally {
            UIModule.toggleLoading(false);
        }
    };

    return {
        loadAllModules,
        getModuleById: async (id) => {
            const modules = await loadAllModules();
            return modules.find(m => m.id === id);
        }
    };
})();

// ===========================================
// M√ìDULO DE TRADU√á√ÉO (COM MELHORIAS)
// ===========================================
const TranslationModule = (() => {
    const cache = new Map();
    // Termos que n√£o devem ser traduzidos
    const EXCEPTIONS = [
        "Oraculum Bel√©m", "Or√°culo Bel√©m", "Bel√©m", "COP 30", "Theatro da Paz",
        "Ver-o-Peso", "Mangal das Gar√ßas", "Tacac√°", "Mani√ßoba", "A√ßa√≠", "G1",
        "SAMU", "Ibis"
    ];

    const translate = async (text, targetLang) => {
        if (targetLang === 'pt' || !text) return text;
        const key = `${text}_${targetLang}`;
        if (cache.has(key)) return cache.get(key);
        if (EXCEPTIONS.some(exception => text.includes(exception))) return text;

        try {
            const translatedText = await ApiService.fetchTranslation(text, targetLang);
            cache.set(key, translatedText);
            return translatedText;
        } catch (e) {
            console.warn('Falha na tradu√ß√£o:', text, e);
            return text; // Retorna o texto original em caso de falha
        }
    };

    return {
        translate
    };
})();

// ===========================================
// M√ìDULO DE UI (INTERFACE DO USU√ÅRIO)
// ===========================================
const UIModule = (() => {
    const elements = {
        container: document.querySelector('.container-modulos'),
        modal: document.getElementById('modal-container'),
        modalDialog: document.querySelector('.modal-dialogo'),
        modalImg: document.getElementById('modal-imagem-destaque'),
        modalTitle: document.getElementById('modal-titulo-destaque'),
        modalDesc: document.getElementById('modal-descricao-detalhada'),
        modalBody: document.querySelector('.modal-corpo'),
        loading: document.getElementById('loading-indicator'),
        loadingText: document.querySelector('#loading-indicator'),
        buttons: document.querySelectorAll('.btn-idioma')
    };

    // Adiciona um container para a lista din√¢mica dentro do modal
    const itemListContainer = document.createElement('div');
    itemListContainer.className = 'modal-item-list';
    elements.modalBody.appendChild(itemListContainer);
    elements.itemListContainer = itemListContainer;

    const toggleLoading = (show, text = 'Traduzindo...') => {
        elements.loadingText.innerHTML = `<i class="fa-solid fa-spinner fa-spin"></i> ${text}`;
        elements.loading.style.display = show ? 'flex' : 'none';
    };

    const showError = (message) => {
        elements.container.innerHTML = `<p class="error-message">${message}</p>`;
    };

    // Nova fun√ß√£o para renderizar listas din√¢micas no Modal
    const renderItemList = (items, moduleId) => {
        elements.itemListContainer.innerHTML = ''; // Limpa a lista anterior
        if (!items || items.length === 0) return;

        items.forEach(item => {
            const itemElement = document.createElement('div');
            itemElement.className = 'item-card';

            const linkText = (moduleId === 'pontos-turisticos' || moduleId === 'hoteis-hospedagem') ? 'Ver no mapa' : 'Ler mais...';

            itemElement.innerHTML = `
                ${item.thumbnail || item.image ? `<img src="${item.thumbnail || item.image}" alt="${item.title}" class="item-card-image">` : ''}
                <div class="item-card-content">
                    <h4 class="item-card-title translatable" data-original="${item.title}">${item.title}</h4>
                    <p class="item-card-description translatable" data-original="${item.description || ''}">${item.description || ''}</p>
                    ${item.link ? `<a href="${item.link}" target="_blank" class="item-card-link">${linkText} <i class="fa-solid fa-arrow-up-right-from-square"></i></a>` : ''}
                </div>
            `;
            elements.itemListContainer.appendChild(itemElement);
        });
    };

    const setModalContentVisibility = (showList) => {
        elements.modalDesc.style.display = showList ? 'none' : 'block';
        elements.itemListContainer.style.display = showList ? 'block' : 'none';
    };

    return {
        elements,
        toggleLoading,
        showError,
        renderItemList,
        setModalContentVisibility,
        setButtonState: (lang) => {
            elements.buttons.forEach(btn => btn.classList.toggle('ativo', btn.dataset.lang === lang));
        },
        setButtonsLoading: (loading) => {
            elements.buttons.forEach(btn => btn.classList.toggle('carregando', loading));
        },
        updateTranslatable: async (elementsToUpdate, targetLang) => {
            const translationPromises = [];
            elementsToUpdate.forEach(el => {
                const originalText = el.getAttribute('data-original') || el.textContent;
                if (!el.getAttribute('data-original')) {
                    el.setAttribute('data-original', originalText);
                }
                translationPromises.push(TranslationModule.translate(originalText, targetLang));
            });
            const translations = await Promise.all(translationPromises);
            elementsToUpdate.forEach((el, i) => {
                el.textContent = translations[i];
            });
        },
        openModal: () => elements.modal.classList.add('visivel'),
        closeModal: () => elements.modal.classList.remove('visivel')
    };
})();

// ===========================================
// M√ìDULO DE LINGUAGEM
// ===========================================
const LanguageModule = (() => {
    let currentLang = 'pt';

    const updateAllTexts = async (targetLang) => {
        UIModule.toggleLoading(true, 'Traduzindo...');
        UIModule.setButtonsLoading(true);

        try {
            const elements = document.querySelectorAll('.translatable');
            if (targetLang === 'pt') {
                elements.forEach(el => {
                    const original = el.getAttribute('data-original');
                    if (original) el.textContent = original;
                });
            } else {
                await UIModule.updateTranslatable(Array.from(elements), targetLang);
            }
        } catch (e) {
            console.error('Erro ao atualizar textos:', e);
        } finally {
            UIModule.toggleLoading(false);
            UIModule.setButtonsLoading(false);
        }
    };

    return {
        getCurrentLang: () => currentLang,
        setLang: async (newLang) => {
            if (currentLang === newLang) return;
            currentLang = newLang;
            document.documentElement.lang = newLang === 'pt' ? 'pt-br' : newLang;
            UIModule.setButtonState(newLang);
            await updateAllTexts(newLang);
            // Atualizar idioma do chatbot
            ChatbotModule.updateChatLanguage(newLang);
        }
    };
})();

// ===========================================
// M√ìDULO DE CARDS
// ===========================================
const CardModule = (() => {
    const createCard = (mod, isPrincipal = false) => {
        const card = document.createElement('div');
        card.className = isPrincipal ? 'card-modulo principal' : 'card-modulo';
        card.dataset.id = mod.id;
        
        if (!isPrincipal) {
            card.style.backgroundImage = `url(${mod.bg})`;
        }

        if (isPrincipal) {
            card.innerHTML = `
                <div class="card-conteudo">
                    <!-- Chat ser√° inserido aqui -->
                </div>
            `;
            
            // Inicializar chat no card principal
            setTimeout(() => {
                ChatbotModule.initChatInterface(card.querySelector('.card-conteudo'));
            }, 100);
        } else {
            card.innerHTML = `
                <div class="card-conteudo">
                    <i class="icone ${mod.icone}"></i>
                    <h3 class="translatable" data-original="${mod.titulo}">${mod.titulo}</h3>
                </div>
            `;
        }
        
        return card;
    };

    const render = async () => {
        const container = UIModule.elements.container;
        if (!container) return;

        const modules = await DataModule.loadAllModules();
        container.innerHTML = '';

        // Encontrar o m√≥dulo Oraculum AI
        const oraculumModule = modules.find(mod => mod.id === 'oraculum-ai');
        const otherModules = modules.filter(mod => mod.id !== 'oraculum-ai');

        // Criar container do m√≥dulo principal
        if (oraculumModule) {
            const principalContainer = document.createElement('div');
            principalContainer.className = 'modulo-principal-container';
            
            const principalCard = createCard(oraculumModule, true);
            principalContainer.appendChild(principalCard);
            container.appendChild(principalContainer);
        }

        // Criar grid dos outros m√≥dulos
        const gridContainer = document.createElement('div');
        gridContainer.className = 'modulos-grid';
        
        otherModules.forEach(mod => {
            const card = createCard(mod, false);
            gridContainer.appendChild(card);
        });
        
        container.appendChild(gridContainer);

        if (LanguageModule.getCurrentLang() !== 'pt') {
            const elementsToTranslate = container.querySelectorAll('.translatable');
            await UIModule.updateTranslatable(Array.from(elementsToTranslate), LanguageModule.getCurrentLang());
        }
    };

    return {
        render
    };
})();

// ===========================================
// M√ìDULO DE MODAL (AGORA DIN√ÇMICO)
// ===========================================
const ModalModule = (() => {
    let currentGame = null;

    const open = async (id) => {
        const mod = await DataModule.getModuleById(id);
        if (!mod) return;

        // Se for o Oraculum AI, n√£o abrir modal (j√° est√° no card principal)
        if (mod.isChatbot && id === 'oraculum-ai') {
            console.log('Oraculum AI j√° est√° integrado no card principal');
            return;
        }

        console.log('Abrindo m√≥dulo:', id, mod); // Debug

        const {
            modalImg,
            modalTitle,
            modalDesc,
            itemListContainer
        } = UIModule.elements;
        const currentLang = LanguageModule.getCurrentLang();
        const gameCanvas = document.getElementById('gameCanvas');

        modalImg.src = mod.bg;
        modalImg.alt = mod.titulo;

        // Limpa e prepara para novo conte√∫do
        UIModule.renderItemList([], id);

        const [titulo, desc] = await Promise.all([
            TranslationModule.translate(mod.titulo, currentLang),
            TranslationModule.translate(mod.desc, currentLang)
        ]);

        modalTitle.textContent = titulo;
        modalTitle.setAttribute('data-original', mod.titulo);
        modalTitle.classList.add('translatable');

        modalDesc.textContent = desc;
        modalDesc.setAttribute('data-original', mod.desc);
        modalDesc.classList.add('translatable');

        if (mod.isChatbot) {
            console.log('Iniciando modo chatbot'); // Debug
            modalImg.style.display = 'none';
            const gameCanvas = document.getElementById('gameCanvas');
            if (gameCanvas) {
                gameCanvas.style.display = 'none';
            }
            
            // Cria interface do chatbot
            ChatbotModule.initChatInterface();
            
            UIModule.setModalContentVisibility(true);
            modalDesc.style.display = 'block';
        } else if (mod.items && mod.items.length > 0) {
            modalImg.style.display = 'block';
            gameCanvas.style.display = 'none';
            UIModule.setModalContentVisibility(true);
            UIModule.renderItemList(mod.items, id);

            if (currentLang !== 'pt') {
                const itemElements = itemListContainer.querySelectorAll('.translatable');
                await UIModule.updateTranslatable(Array.from(itemElements), currentLang);
            }
        } else {
            modalImg.style.display = 'block';
            gameCanvas.style.display = 'none';
            UIModule.setModalContentVisibility(false);
        }

        UIModule.openModal();
    };

    const close = () => {
        if (currentGame) {
            currentGame.destroy();
            currentGame = null;
        }
        const gameCanvas = document.getElementById('gameCanvas');
        if (gameCanvas) {
            gameCanvas.style.display = 'none';
        }
        if (UIModule.elements.modalImg) {
            UIModule.elements.modalImg.style.display = 'block';
        }
        // Limpa interface do chatbot
        ChatbotModule.clearChatInterface();
        UIModule.closeModal();
    };

    return {
        open,
        close
    };
})();

// ===========================================
// M√ìDULO DE EVENTOS
// ===========================================
const EventModule = (() => {
    const init = () => {
        // Eventos de idioma
        UIModule.elements.buttons.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const lang = e.target.dataset.lang;
                if (!btn.classList.contains('carregando')) {
                    LanguageModule.setLang(lang);
                }
            });
        });

        // Eventos de cards
        UIModule.elements.container.addEventListener('click', e => {
            const card = e.target.closest('.card-modulo');
            if (card && !card.classList.contains('principal')) {
                ModalModule.open(card.dataset.id);
            }
        });

        // Eventos de modal
        document.getElementById('modal-fechar-btn').addEventListener('click', ModalModule.close);
        UIModule.elements.modal.addEventListener('click', e => {
            if (e.target === UIModule.elements.modal) ModalModule.close();
        });
        document.addEventListener('keydown', e => {
            if (e.key === 'Escape') ModalModule.close();
        });
    };

    return {
        init
    };
})();

// ===========================================
// M√ìDULO DO CHATBOT ORACULUM AI
// ===========================================
const ChatbotModule = (() => {
    // ‚ö†Ô∏è ALERTA DE SEGURAN√áA: Esta chave deve ser movida para o backend
    // Por enquanto, usando modo de demonstra√ß√£o com fallback inteligente
    // Configura√ß√£o da API - Use vari√°veis de ambiente em produ√ß√£o
    const API_KEY = window.GEMINI_API_KEY || 'SUA_CHAVE_AQUI'; // Configure em um arquivo separado
    const API_ENDPOINT = 'https://generativelanguage.googleapis.com/v1/models/gemini-2.0-flash:generateContent';
    
    let chatContainer = null;
    let messageHistory = [];
    let lastRequestTime = 0;
    const RATE_LIMIT_MS = 2000; // 2 segundos entre requisi√ß√µes

    // Sistema de prompt para especializar a IA em Bel√©m e COP 30
    const SYSTEM_PROMPT = `Voc√™ √© um guia tur√≠stico especialista em Bel√©m do Par√° e na COP 30 (Confer√™ncia das Na√ß√µes Unidas sobre Mudan√ßas Clim√°ticas). Suas respostas devem ser:

1. FOCADAS apenas em Bel√©m do Par√°, COP 30, turismo sustent√°vel na regi√£o e cultura paraense
2. CONCISAS (m√°ximo 150 tokens por resposta)
3. √öTEIS para turistas visitando a cidade
4. Em PORTUGU√äS BRASILEIRO
5. Se perguntarem sobre outros assuntos n√£o relacionados a Bel√©m/COP 30, responda educadamente que voc√™ √© especialista apenas nesses temas

Temas que voc√™ pode abordar:
- Pontos tur√≠sticos de Bel√©m
- Culin√°ria paraense (a√ßa√≠, tacac√°, mani√ßoba, etc.)
- Historia de Bel√©m
- COP 30 e sustentabilidade
- Transporte na cidade
- Hot√©is e hospedagem
- Cultura amaz√¥nica
- Dicas de seguran√ßa para turistas
- Eventos culturais`;

    // Respostas de fallback locais - Sistema Inteligente Expandido
    const getFallbackResponse = (message) => {
        const msg = message.toLowerCase();
        const currentLang = LanguageModule.getCurrentLang();
        
        // Se n√£o for portugu√™s, traduzir a resposta automaticamente
        if (currentLang !== 'pt') {
            return getFallbackResponseTranslated(message, currentLang);
        }
        
        // Cumprimentos e sauda√ß√µes
        if (msg.includes('bom dia') || msg.includes('boa tarde') || msg.includes('boa noite') || msg.includes('ol√°') || msg.includes('oi') || msg.includes('hey') || msg.includes('oi√™')) {
            const saudacao = msg.includes('bom dia') ? 'üåÖ Bom dia' : 
                            msg.includes('boa tarde') ? '‚òÄÔ∏è Boa tarde' : 
                            msg.includes('boa noite') ? 'üåô Boa noite' : 'üëã Ol√°';
            return `${saudacao}! Bem-vindo a Bel√©m, a porta de entrada da Amaz√¥nia! üåø

Como posso te ajudar com informa√ß√µes sobre nossa bela cidade e a COP 30? Posso falar sobre pontos tur√≠sticos, restaurantes, hot√©is, transporte ou qualquer coisa relacionada a Bel√©m do Par√°.

üó£Ô∏è **Dica**: Experimente perguntar "O que fazer em Bel√©m?" ou "Onde comer tacac√°?"`;
        }
        
        // Alimenta√ß√£o e restaurantes
        if (msg.includes('almo√ß') || msg.includes('jantar') || msg.includes('restaurante') || msg.includes('comida') || msg.includes('comer') || msg.includes('fome') || msg.includes('prato')) {
            return `üçΩÔ∏è **Melhores Restaurantes em Bel√©m:**

üè™ **Mercado Ver-o-Peso**: Tacac√° aut√™ntico, a√ßa√≠ tradicional e pratos regionais
üåä **Esta√ß√£o das Docas**: Restaurantes sofisticados com vista para o rio Guam√°
ü•• **Point do A√ßa√≠**: O melhor a√ßa√≠ tradicional paraense (servido salgado!)
üè† **L√° em Casa**: Culin√°ria regional familiar e aconchegante
ü¶ã **Mangal das Gar√ßas**: Restaurantes em ambiente natural exuberante
üç§ **Camar√£o do Elias**: Especialista em frutos do mar amaz√¥nicos
üåÆ **Remanso do Bosque**: Alta gastronomia paraense

üí° **Dica especial**: Experimente o tacac√° no final da tarde para a experi√™ncia mais aut√™ntica!`;
        }
        
        // Hospedagem
        if (msg.includes('hotel') || msg.includes('hospedagem') || msg.includes('dormir') || msg.includes('ficar') || msg.includes('pousada') || msg.includes('pernoitar')) {
            return `üè® **Hospedagem em Bel√©m para todos os or√ßamentos:**

‚≠ê **LUXO (R$ 300+/noite):**
‚Ä¢ Grand Mercure Bel√©m do Par√° (Nazar√©)
‚Ä¢ Vila Gal√© Collection Amaz√¥nia (tem√°tica)
‚Ä¢ Radisson Hotel Maiorana Jr (executivo)

üèõÔ∏è **HIST√ìRICO/BOUTIQUE (R$ 200-300/noite):**
‚Ä¢ Atrium Quinta de Pedras (casar√£o colonial)
‚Ä¢ Hotel Gr√£o Par√° (centro hist√≥rico)

üí∞ **ECON√îMICO (R$ 100-200/noite):**
‚Ä¢ Ibis Styles Bel√©m (moderno)
‚Ä¢ Bristol Umarizal Hotel (beira-rio)
‚Ä¢ Beira Rio Hotel (vista panor√¢mica)

üìç **Melhores bairros**: Nazar√© (elegante), Umarizal (central), Batista Campos (tranquilo)`;
        }
        
        // Pontos tur√≠sticos
        if (msg.includes('pontos tur√≠sticos') || msg.includes('visitar') || msg.includes('turismo') || msg.includes('atra√ß√µes') || msg.includes('passear') || msg.includes('conhecer')) {
            return `üèõÔ∏è **Pontos Tur√≠sticos Imperd√≠veis em Bel√©m:**

üè™ **Ver-o-Peso** (parada obrigat√≥ria): Maior feira ao ar livre da Am√©rica Latina

üé≠ **Theatro da Paz** (1878): Teatro hist√≥rico com arquitetura neocl√°ssica

ü¶ã **Mangal das Gar√ßas**: Parque natural urbano com borbolet√°rio

üö¢ **Esta√ß√£o das Docas**: Complexo gastron√¥mico √† beira-rio

‚õ™ **Bas√≠lica Santu√°rio de Nazar√©**: Marco religioso do C√≠rio

üèõÔ∏è **Cidade Velha**: Centro hist√≥rico com arquitetura colonial portuguesa

üèûÔ∏è **Ilha do Combu**: Para√≠so natural a 15 min de barco

üå≥ **Pra√ßa Batista Campos**: √Årea verde para relaxar

üå∫ **Parque da Resid√™ncia**: Orquid√°rio e anfiteatro

‚è∞ **Roteiro de 1 dia**: Ver-o-Peso (manh√£) ‚Üí Cidade Velha (tarde) ‚Üí Esta√ß√£o das Docas (p√¥r do sol)`;
        }
        
        // COP 30 e sustentabilidade
        if (msg.includes('cop 30') || msg.includes('cop30') || msg.includes('confer√™ncia') || msg.includes('clima') || msg.includes('sustentabilidade') || msg.includes('meio ambiente')) {
            return `üåç **COP 30 - Bel√©m 2025: A COP da Amaz√¥nia!**

A 30¬™ Confer√™ncia da ONU sobre Mudan√ßas Clim√°ticas ser√° realizada em Bel√©m!

üèóÔ∏è **Preparativos em andamento:**
‚Ä¢ Novo centro de conven√ß√µes no Hangar
‚Ä¢ Infraestrutura sustent√°vel ampliada
‚Ä¢ Transporte p√∫blico BRT expandido
‚Ä¢ Hot√©is com certifica√ß√£o eco-friendly

üåø **Destaques √∫nicos:**
‚Ä¢ Primeira COP realizada na Amaz√¥nia
‚Ä¢ Foco em solu√ß√µes baseadas na natureza
‚Ä¢ Programa√ß√£o cultural amaz√¥nica rica
‚Ä¢ Turismo sustent√°vel e respons√°vel
‚Ä¢ Participa√ß√£o de povos ind√≠genas

üìÖ **Data**: Novembro de 2025
üéØ **Expectativa**: 40.000+ participantes de 190+ pa√≠ses`;
        }
        
        // Transporte
        if (msg.includes('transporte') || msg.includes('como chegar') || msg.includes('√¥nibus') || msg.includes('t√°xi') || msg.includes('uber') || msg.includes('metro') || msg.includes('brt')) {
            return `üöå **Transporte completo em Bel√©m:**

üöç **BRT Bel√©m**: Sistema de tr√¢nsito r√°pido moderno

üöï **T√°xi/Uber/99**: Dispon√≠vel 24h, use apps para mais seguran√ßa

üö¥ **Bike Bel√©m**: Esta√ß√µes de bicicletas compartilhadas

‚õµ **Barcos**: Para Ilha do Combu (Terminal Ruy Barata, R$ 3)

‚úàÔ∏è **Aeroporto**: Val-de-Cans, 15km do centro (t√°xi ~R$ 50)

üöå **√înibus urbano**: Extensa rede, passagem R$ 4,30

üí° **Dicas pr√°ticas**:
‚Ä¢ Use BRT para trajetos longos (mais r√°pido)
‚Ä¢ √Ä noite, prefira Uber/99 (mais seguro)
‚Ä¢ Para COP 30, haver√° linhas especiais gratuitas
‚Ä¢ Apps √∫teis: Moovit, Google Maps`;
        }
        
        // Seguran√ßa
        if (msg.includes('seguran√ßa') || msg.includes('cuidado') || msg.includes('perigo') || msg.includes('assalto') || msg.includes('roubo') || msg.includes('perigoso')) {
            return `üõ°Ô∏è **Seguran√ßa em Bel√©m - Guia Completo:**

‚ö†Ô∏è **Cuidados essenciais:**
‚Ä¢ N√£o exiba objetos de valor (celular, joias)
‚Ä¢ Evite andar sozinho ap√≥s 20h
‚Ä¢ Use transporte por app √† noite
‚Ä¢ Mantenha documentos em local seguro
‚Ä¢ Prefira cart√£o a dinheiro em esp√©cie

üì± **Emerg√™ncias importantes:**
‚Ä¢ Pol√≠cia Militar: 190
‚Ä¢ SAMU (Ambul√¢ncia): 192
‚Ä¢ Bombeiros: 193
‚Ä¢ Pol√≠cia Civil: 197

‚úÖ **√Åreas mais seguras:**
‚Ä¢ Esta√ß√£o das Docas (policiamento)
‚Ä¢ Mangal das Gar√ßas (√°rea tur√≠stica)
‚Ä¢ Shopping centers (seguran√ßa privada)
‚Ä¢ Hot√©is da orla (movimento constante)
‚Ä¢ Theatro da Paz (centro cultural)`;
        }
        
        // Culin√°ria espec√≠fica
        if (msg.includes('a√ßa√≠') || msg.includes('tacac√°') || msg.includes('mani√ßoba') || msg.includes('culin√°ria') || msg.includes('comida t√≠pica') || msg.includes('prato paraense')) {
            return `ü•£ **Culin√°ria Paraense Aut√™ntica - Imperd√≠veis:**

üçá **A√ßa√≠**: Servido SALGADO com farinha d'√°gua, peixe frito ou charque (esque√ßa o doce!)
üç≤ **Tacac√°**: Caldo quente com tucum√£, jambu (deixa a boca dormente) e camar√£o seco
ü•ò **Mani√ßoba**: "Feijoada paraense" - folhas de mandioca cozidas por 7 dias com carnes
ü¶Ü **Pato no Tucum√£**: Prato especial para ocasi√µes festivas
ü¶Ä **Caranguejo**: Especialidade das ilhas, melhor √©poca: junho-novembro
üêü **Pirarucu**: Peixe gigante da Amaz√¥nia, preparado assado
ü•• **Cupua√ßu**: Fruta amaz√¥nica para sobremesas

üìç **Onde experimentar**: Ver-o-Peso (aut√™ntico), Point do A√ßa√≠ (tradicional), L√° em Casa (caseiro)`;
        }
        
        // Clima e tempo
        if (msg.includes('clima') || msg.includes('tempo') || msg.includes('chuva') || msg.includes('calor') || msg.includes('temperatura')) {
            return `üå§Ô∏è **Clima tropical de Bel√©m:**

üå°Ô∏è **Temperatura**: 24¬∞C a 32¬∞C (ano todo, pouca varia√ß√£o)

‚òî **Esta√ß√£o mais chuvosa**: Dezembro a Maio (chuvas di√°rias)

‚òÄÔ∏è **Menos chuva**: Junho a Novembro (melhor √©poca)

üíß **Umidade**: Sempre alta (80-85%)

üå™Ô∏è **Ventos**: Brisas constantes do rio

üëï **O que levar sempre:**
‚Ä¢ Roupas leves, claras e respir√°veis
‚Ä¢ Protetor solar FPS 60+ (sol forte)
‚Ä¢ Capa de chuva ou guarda-chuva compacto
‚Ä¢ Repelente (mosquitos s√£o comuns)
‚Ä¢ Cal√ßado antiderrapante para chuva

üí° **Dica local**: As chuvas s√£o intensas mas passam r√°pido!`;
        }
        
        // Compras e souvenirs
        if (msg.includes('compras') || msg.includes('shopping') || msg.includes('souvenirs') || msg.includes('lembran√ßas') || msg.includes('artesanato')) {
            return 'ÔøΩÔ∏è **Compras e Souvenirs em Bel√©m:**\\n\\nüè™ **Ver-o-Peso**: Artesanato amaz√¥nico, ervas, temperos, cer√¢mica marajoara\\nüõí **Shopping P√°tio Bel√©m**: Lojas nacionais, pra√ßa de alimenta√ß√£o\\nüé® **Casa das Artes**: Artesanato local e regional\\nüåø **Mercado de S√£o Br√°s**: Produtos naturais e plantas medicinais\\n\\nüéÅ **Souvenirs aut√™nticos:**\\n‚Ä¢ Cer√¢mica marajoara (arte milenar)\\n‚Ä¢ Joias com pedras amaz√¥nicas\\n‚Ä¢ Redes de dormir tradicionais\\n‚Ä¢ A√ßa√≠ em p√≥ ou polpa\\n‚Ä¢ Cacha√ßas artesanais regionais\\n‚Ä¢ √ìleos e ess√™ncias amaz√¥nicas\\n\\nüí∞ **Dica**: Sempre negocie o pre√ßo no Ver-o-Peso!';
        }
        
        // Vida noturna
        if (msg.includes('noite') || msg.includes('balada') || msg.includes('bar') || msg.includes('festa') || msg.includes('divers√£o noturna')) {
            return 'üåÉ **Vida Noturna em Bel√©m:**\\n\\nüçª **Bares tradicionais:**\\n‚Ä¢ Boteco Magn√≠fico (chopp gelado)\\n‚Ä¢ Bar do Parque (ambiente familiar)\\n‚Ä¢ Cervejaria Bel√©m (craft beer local)\\n\\nÔøΩ **M√∫sica ao vivo:**\\n‚Ä¢ Casa Tom (MPB e jazz)\\n‚Ä¢ Esta√ß√£o das Docas (shows eventuais)\\n‚Ä¢ Teatro Waldemar Henrique (cultura)\\n\\nüèñÔ∏è **Orla de Icoaraci** (fins de semana):\\n‚Ä¢ Barracas na praia\\n‚Ä¢ M√∫sica regional (brega, carimb√≥)\\n‚Ä¢ Ambiente descontra√≠do\\n\\n‚ö†Ô∏è **Seguran√ßa**: Sempre use Uber/t√°xi √† noite e ande em grupo';
        }
        
        // Perguntas sobre pre√ßos/custos
        if (msg.includes('pre√ßo') || msg.includes('custa') || msg.includes('valor') || msg.includes('quanto') || msg.includes('barato') || msg.includes('caro')) {
            return 'üí∞ **Custos em Bel√©m (estimativas 2025):**\\n\\nüçΩÔ∏è **Alimenta√ß√£o:**\\n‚Ä¢ Tacac√°: R$ 8-12\\n‚Ä¢ Almo√ßo simples: R$ 25-35\\n‚Ä¢ Restaurante bom: R$ 60-100/pessoa\\n‚Ä¢ A√ßa√≠ tradicional: R$ 15-25\\n\\nüöå **Transporte:**\\n‚Ä¢ √înibus urbano: R$ 4,30\\n‚Ä¢ Uber (centro): R$ 15-30\\n‚Ä¢ T√°xi aeroporto: R$ 45-60\\n‚Ä¢ Barco Ilha do Combu: R$ 3\\n\\nüé´ **Atra√ß√µes:**\\n‚Ä¢ Theatro da Paz: R$ 10-40\\n‚Ä¢ Mangal das Gar√ßas: R$ 15\\n‚Ä¢ Museus: R$ 5-15\\n‚Ä¢ Ver-o-Peso: Gratuito\\n\\nÔøΩ **Dica**: Bel√©m √© mais barata que capitais do Sul/Sudeste!';
        }
        
        // Perguntas sobre dura√ß√£o da visita
        if (msg.includes('quantos dias') || msg.includes('tempo ficar') || msg.includes('roteiro') || msg.includes('itiner√°rio')) {
            return 'üìÖ **Roteiros para Bel√©m:**\\n\\n‚ö° **2 dias (m√≠nimo):**\\n‚Ä¢ Dia 1: Ver-o-Peso + Cidade Velha + Esta√ß√£o das Docas\\n‚Ä¢ Dia 2: Mangal das Gar√ßas + Theatro da Paz + Bas√≠lica\\n\\nüåü **4-5 dias (ideal):**\\n‚Ä¢ + Ilha do Combu\\n‚Ä¢ + Mercado de S√£o Br√°s\\n‚Ä¢ + Icoaraci (cer√¢mica)\\n‚Ä¢ + Mais restaurantes locais\\n\\nüèñÔ∏è **1 semana+ (completo):**\\n‚Ä¢ + Salin√≥polis (praias)\\n‚Ä¢ + Alter do Ch√£o (Caribe Amaz√¥nico)\\n‚Ä¢ + Maraj√≥ (b√∫falos)\\n\\nüí° **Recomenda√ß√£o**: 4 dias √© perfeito para conhecer bem a cidade!';
        }
        
        // Fallback padr√£o mais inteligente
        return 'üëã **Ol√°! Sou o Oraculum AI** ü§ñ\\n\\nEspecialista em **Bel√©m do Par√°** e **COP 30**. Seu guia local inteligente!\\n\\nüéØ **Perguntas populares que posso responder:**\\n\\nüçΩÔ∏è \"Onde almo√ßar em Bel√©m?\"\\nüè® \"Melhores hot√©is da cidade\"\\nüèõÔ∏è \"O que visitar em 3 dias?\"\\nüåç \"Como ser√° a COP 30?\"\\nüöå \"Como me locomover?\"\\nüõ°Ô∏è \"Bel√©m √© segura?\"\\nü•£ \"O que √© tacac√°?\"\\nüí∞ \"Quanto custa viajar para c√°?\"\\n\\nüí¨ **Digite sua d√∫vida** e receba informa√ß√µes detalhadas e atualizadas sobre nossa bela cidade amaz√¥nica!';
    };

    // Respostas traduzidas para outros idiomas
    const getFallbackResponseTranslated = (message, lang) => {
        const msg = message.toLowerCase();
        
        if (lang === 'en') {
            // Cumprimentos
            if (msg.includes('hello') || msg.includes('hi') || msg.includes('good morning') || msg.includes('good afternoon') || msg.includes('good evening')) {
                return `üëã Hello! Welcome to Bel√©m, the gateway to the Amazon! üåø

How can I help you with information about our beautiful city and COP 30? I can talk about tourist attractions, restaurants, hotels, transportation or anything related to Bel√©m do Par√°.

üó£Ô∏è **Tip**: Try asking "What to do in Bel√©m?" or "Where to eat tacac√°?"`;
            }
            
            // Alimenta√ß√£o
            if (msg.includes('lunch') || msg.includes('dinner') || msg.includes('restaurant') || msg.includes('food') || msg.includes('eat') || msg.includes('hungry')) {
                return `üçΩÔ∏è **Best Restaurants in Bel√©m:**

üè™ **Mercado Ver-o-Peso**: Authentic tacac√°, traditional a√ßa√≠ and regional dishes
üåä **Esta√ß√£o das Docas**: Sophisticated restaurants with river view
ü•• **Point do A√ßa√≠**: The best traditional Par√° a√ßa√≠ (served salty!)
üè† **L√° em Casa**: Regional family cuisine
ü¶ã **Mangal das Gar√ßas**: Restaurants in exuberant natural environment
üç§ **Camar√£o do Elias**: Amazon seafood specialist
üåÆ **Remanso do Bosque**: High-end Par√° cuisine

üí° **Special tip**: Try tacac√° in the late afternoon for the most authentic experience!`;
            }
            
            // Padr√£o
            return `üëã **Hello! I'm Oraculum AI** ü§ñ

**Bel√©m do Par√°** and **COP 30** specialist. Your intelligent local guide!

üéØ **Popular questions I can answer:**

üçΩÔ∏è "Where to have lunch in Bel√©m?"
üè® "Best hotels in the city"
üèõÔ∏è "What to visit in 3 days?"
üåç "How will COP 30 be?"
üöå "How to get around?"
üõ°Ô∏è "Is Bel√©m safe?"
ü•£ "What is tacac√°?"
üí∞ "How much does it cost to travel here?"

üí¨ **Type your question** and receive detailed and updated information about our beautiful Amazonian city!`;
        }
        
        if (lang === 'es') {
            // Cumprimentos
            if (msg.includes('hola') || msg.includes('buenos d√≠as') || msg.includes('buenas tardes') || msg.includes('buenas noches')) {
                return `üëã ¬°Hola! ¬°Bienvenido a Bel√©m, la puerta de entrada al Amazonas! üåø

¬øC√≥mo puedo ayudarte con informaci√≥n sobre nuestra hermosa ciudad y la COP 30? Puedo hablar sobre atracciones tur√≠sticas, restaurantes, hoteles, transporte o cualquier cosa relacionada con Bel√©m do Par√°.

üó£Ô∏è **Consejo**: Intenta preguntar "¬øQu√© hacer en Bel√©m?" o "¬øD√≥nde comer tacac√°?"`;
            }
            
            // Alimentaci√≥n
            if (msg.includes('almuerzo') || msg.includes('cena') || msg.includes('restaurante') || msg.includes('comida') || msg.includes('comer') || msg.includes('hambre')) {
                return `üçΩÔ∏è **Mejores Restaurantes en Bel√©m:**

üè™ **Mercado Ver-o-Peso**: Tacac√° aut√©ntico, a√ßa√≠ tradicional y platos regionales
üåä **Esta√ß√£o das Docas**: Restaurantes sofisticados con vista al r√≠o
ü•• **Point do A√ßa√≠**: ¬°El mejor a√ßa√≠ tradicional de Par√° (servido salado!)
üè† **L√° em Casa**: Cocina regional familiar
ü¶ã **Mangal das Gar√ßas**: Restaurantes en ambiente natural exuberante
üç§ **Camar√£o do Elias**: Especialista en mariscos amaz√≥nicos
üåÆ **Remanso do Bosque**: Alta cocina paraense

üí° **Consejo especial**: ¬°Prueba el tacac√° al final de la tarde para la experiencia m√°s aut√©ntica!`;
            }
            
            // Padr√£o
            return `üëã **¬°Hola! Soy Oraculum AI** ü§ñ

Especialista en **Bel√©m do Par√°** y **COP 30**. ¬°Tu gu√≠a local inteligente!

üéØ **Preguntas populares que puedo responder:**

üçΩÔ∏è "¬øD√≥nde almorzar en Bel√©m?"
üè® "Mejores hoteles de la ciudad"
üèõÔ∏è "¬øQu√© visitar en 3 d√≠as?"
üåç "¬øC√≥mo ser√° la COP 30?"
üöå "¬øC√≥mo moverse?"
üõ°Ô∏è "¬øEs seguro Bel√©m?"
ü•£ "¬øQu√© es el tacac√°?"
üí∞ "¬øCu√°nto cuesta viajar aqu√≠?"

üí¨ **Escribe tu pregunta** y recibe informaci√≥n detallada y actualizada sobre nuestra hermosa ciudad amaz√≥nica!`;
        }
        
        // Se n√£o houver tradu√ß√£o, usar portugu√™s
        return getFallbackResponse(message);
    };

    // Sistema de dados locais para Bel√©m
    let localDatabase = null;
    
    const loadLocalDatabase = async () => {
        if (localDatabase) return localDatabase; // Cache para evitar m√∫ltiplas requisi√ß√µes
        
        try {
            const response = await fetch('/api/belem-data/');
            if (response.ok) {
                localDatabase = await response.json();
                console.log('üíæ Base de dados local de Bel√©m carregada com sucesso');
                return localDatabase;
            } else {
                console.warn('‚ö†Ô∏è Erro ao carregar dados locais, usando fallback');
                return null;
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro de rede ao carregar dados locais:', error.message);
            return null;
        }
    };
    
    const searchLocalData = (message, database) => {
        if (!database) return null;
        
        const msg = message.toLowerCase();
        let results = [];
        
        // FOR√áA BUSCA POR HOT√âIS se mensagem cont√©m palavras relacionadas
        if (msg.includes('hosped') || msg.includes('hotel') || msg.includes('ficar') || msg.includes('dormir') || msg.includes('acomod') || msg.includes('link de locais')) {
            if (database.hoteis && Array.isArray(database.hoteis)) {
                database.hoteis.slice(0, 4).forEach(hotel => {
                    results.push({
                        type: 'hoteis',
                        data: hotel,
                        score: 5
                    });
                });
                return results;
            }
        }
        
        // FOR√áA BUSCA POR RESTAURANTES se mensagem cont√©m palavras relacionadas
        if (msg.includes('comer') || msg.includes('restaurante') || msg.includes('comida') || msg.includes('almo√ß') || msg.includes('jantar')) {
            if (database.restaurantes && Array.isArray(database.restaurantes)) {
                database.restaurantes.slice(0, 4).forEach(rest => {
                    results.push({
                        type: 'restaurantes',
                        data: rest,
                        score: 5
                    });
                });
                return results;
            }
        }
        
        // Continua com busca normal se n√£o for√ßou
        let searchScore = {};
        
        // Palavras-chave categorizadas com pesos
        const keywords = {
            'pontos_turisticos': {
                high: ['ver-o-peso', 'docas', 'theatro', 'mangal', 'basilica', 'museu', 'forte', 'casa onze janelas'],
                medium: ['onde visitar', 'turismo', 'ponto turistico', 'conhecer', 'o que fazer', 'passeio'],
                low: ['visitar', 'ver', 'lugar', 'local']
            },
            'restaurantes': {
                high: ['acai', 'tacaca', 'mani√ßoba', 'remanso', 'point', 'cairu', 'manjar'],
                medium: ['onde comer', 'restaurante', 'comida', 'almoco', 'jantar', 'gastronomia'],
                low: ['comer', 'prato', 'bar', 'lanche']
            },
            'hoteis': {
                high: ['atrium', 'radisson', 'mercure', 'ibis'],
                medium: ['onde ficar', 'hospedagem', 'hotel', 'pousada', 'hospedar', 'me hospedar', 'locais para me hospedar', 'link de locais'],
                low: ['dormir', 'pernoitar', 'ficar', 'estadia', 'acomodacao', 'quartos', 'reserva']
            },
            'transporte': {
                high: ['uber', '99', 'aeroporto', 'brt'],
                medium: ['como chegar', 'transporte', 'taxi', 'onibus'],
                low: ['ir', 'chegar']
            },
            'cop30': {
                high: ['cop30', 'cop 30', 'conferencia clima'],
                medium: ['onu', 'mudancas climaticas', 'conferencia'],
                low: ['evento', '2025']
            },
            'seguranca': {
                high: ['seguranca', 'seguro', 'cuidado', 'perigo'],
                medium: ['emergencia', 'policia', 'risco'],
                low: ['atencao']
            },
            'clima': {
                high: ['clima', 'tempo', 'chuva', 'quando visitar'],
                medium: ['temperatura', 'estacao', 'sol'],
                low: ['calor']
            },
            'compras': {
                high: ['shopping', 'comprar', 'boulevard', 'icoaraci'],
                medium: ['artesanato', 'souvenir', 'ceramica'],
                low: ['loja', 'mercado']
            }
        };
        
        // Calcula pontua√ß√£o por categoria
        Object.keys(keywords).forEach(category => {
            let score = 0;
            keywords[category].high.forEach(term => {
                if (msg.includes(term)) score += 3;
            });
            keywords[category].medium.forEach(term => {
                if (msg.includes(term)) score += 2;
            });
            keywords[category].low.forEach(term => {
                if (msg.includes(term)) score += 1;
            });
            
            if (score > 0) {
                searchScore[category] = score;
            }
        });
        
        // Ordena categorias por relev√¢ncia
        const sortedCategories = Object.keys(searchScore).sort((a, b) => searchScore[b] - searchScore[a]);
        
        // Limita a 2 categorias mais relevantes para economizar tokens
        const topCategories = sortedCategories.slice(0, 2);
        
        // Busca dados nas categorias relevantes
        topCategories.forEach(category => {
            const categoryData = database[category];
            if (!categoryData) return;
            
            if (Array.isArray(categoryData)) {
                // Para arrays, limita a 3 resultados mais relevantes
                const relevantItems = categoryData.slice(0, 3);
                relevantItems.forEach(item => {
                    results.push({
                        type: category,
                        data: item,
                        score: searchScore[category]
                    });
                });
            } else {
                results.push({
                    type: category,
                    data: categoryData,
                    score: searchScore[category]
                });
            }
        });
        
        // Se n√£o encontrou nada espec√≠fico, busca termo exato
        if (results.length === 0) {
            // Busca por palavras individuais na mensagem
            const words = msg.split(' ').filter(word => word.length > 2);
            
            Object.keys(database).forEach(category => {
                const data = database[category];
                if (Array.isArray(data)) {
                    data.slice(0, 3).forEach(item => { // M√°ximo 3 itens por categoria
                        let matches = 0;
                        words.forEach(word => {
                            if (item.nome && item.nome.toLowerCase().includes(word)) {
                                matches += 2;
                            }
                            if (item.descricao && item.descricao.toLowerCase().includes(word)) {
                                matches += 1;
                            }
                            if (item.tags && item.tags.some(tag => tag.toLowerCase().includes(word))) {
                                matches += 1;
                            }
                        });
                        
                        if (matches > 0) {
                            results.push({ type: category, data: item, score: matches });
                        }
                    });
                }
            });
        }
        
        // Se ainda n√£o encontrou nada e a mensagem cont√©m certas palavras-chave, retorna dados gen√©ricos
        if (results.length === 0) {
            if (msg.includes('hotel') || msg.includes('hosped') || msg.includes('ficar') || msg.includes('dormir')) {
                const hoteis = database.hoteis;
                if (hoteis && Array.isArray(hoteis)) {
                    hoteis.slice(0, 3).forEach(hotel => {
                        results.push({ type: 'hoteis', data: hotel, score: 1 });
                    });
                }
            }
            
            if (msg.includes('comer') || msg.includes('restaurante') || msg.includes('comida')) {
                const restaurantes = database.restaurantes;
                if (restaurantes && Array.isArray(restaurantes)) {
                    restaurantes.slice(0, 3).forEach(rest => {
                        results.push({ type: 'restaurantes', data: rest, score: 1 });
                    });
                }
            }
            
            if (msg.includes('visitar') || msg.includes('turismo') || msg.includes('conhecer')) {
                const pontos = database.pontos_turisticos;
                if (pontos && Array.isArray(pontos)) {
                    pontos.slice(0, 3).forEach(ponto => {
                        results.push({ type: 'pontos_turisticos', data: ponto, score: 1 });
                    });
                }
            }
        }
        
        return results.length > 0 ? results.slice(0, 5) : null; // M√°ximo 5 resultados
    };
    
    const formatLocalDataResponse = (results) => {
        try {
            if (!results || !Array.isArray(results) || results.length === 0) {
                return null;
            }
            
            let response = 'üìç **Informa√ß√µes Detalhadas:**\n\n';
            const maxResults = Math.min(4, results.length); // Aumentado para 4 resultados
            const processedResults = results.slice(0, maxResults);
            
            processedResults.forEach((result, index) => {
                try {
                    if (!result || typeof result !== 'object') {
                        return;
                    }
                    
                    const { type, data } = result;
                    
                    if (!data || typeof data !== 'object') {
                        return;
                    }
                    
                    // Formata√ß√£o segura baseada no tipo
                    switch (type) {
                        case 'pontos_turisticos':
                            response += `üèõÔ∏è **${data.nome || 'Local'}**\n`;
                            if (data.endereco) response += `üìç Endere√ßo: ${data.endereco}\n`;
                            if (data.google_maps_link) response += `üó∫Ô∏è Google Maps: ${data.google_maps_link}\n`;
                            if (data.preco) response += `üí∞ Pre√ßo: ${data.preco}\n`;
                            if (data.horario) response += `üïí Hor√°rio: ${data.horario}\n`;
                            if (data.website) response += `üåê Website: ${data.website}\n`;
                            if (data.telefone) response += `üìû Telefone: ${data.telefone}\n`;
                            if (data.dicas) response += `üí° Dicas: ${data.dicas}\n`;
                            if (data.tags && Array.isArray(data.tags)) {
                                response += `üè∑Ô∏è Tags: ${data.tags.slice(0, 4).join(', ')}\n`;
                            }
                            break;
                            
                        case 'restaurantes':
                            response += `üçΩÔ∏è **${data.nome || 'Restaurante'}**\n`;
                            if (data.categoria) response += `üè∑Ô∏è Categoria: ${data.categoria}\n`;
                            if (data.especialidade) response += `üç≤ Especialidade: ${data.especialidade}\n`;
                            if (data.endereco) response += `üìç Endere√ßo: ${data.endereco}\n`;
                            if (data.google_maps_link) response += `üó∫Ô∏è Google Maps: ${data.google_maps_link}\n`;
                            if (data.preco_medio) response += `üí∞ Pre√ßo m√©dio: ${data.preco_medio}\n`;
                            if (data.horario) response += `üïí Hor√°rio: ${data.horario}\n`;
                            if (data.website) response += `üåê Website: ${data.website}\n`;
                            if (data.telefone) response += `üìû Telefone: ${data.telefone}\n`;
                            if (data.pratos_famosos && Array.isArray(data.pratos_famosos)) {
                                response += `‚≠ê Pratos famosos: ${data.pratos_famosos.join(', ')}\n`;
                            }
                            if (data.dicas) response += `üí° Dicas: ${data.dicas}\n`;
                            break;
                            
                        case 'hoteis':
                            response += `üè® **${data.nome || 'Hotel'}**\n`;
                            if (data.categoria) response += `‚≠ê Categoria: ${data.categoria.replace('_', ' ')}\n`;
                            if (data.endereco) response += `üìç **Endere√ßo:** ${data.endereco}\n`;
                            if (data.google_maps_link) {
                                response += `üó∫Ô∏è **Ver no Mapa:** [Abrir no Google Maps](${data.google_maps_link})\n`;
                            } else if (data.nome) {
                                const searchQuery = encodeURIComponent(`${data.nome} Bel√©m Par√°`);
                                const mapsUrl = `https://maps.google.com/?q=${searchQuery}`;
                                response += `üó∫Ô∏è **Ver no Mapa:** [Buscar no Google Maps](${mapsUrl})\n`;
                            }
                            if (data.preco_diaria) response += `üí∞ **Pre√ßo da di√°ria:** ${data.preco_diaria}\n`;
                            if (data.website) response += `üåê **Website:** [${data.website}](${data.website})\n`;
                            if (data.telefone) response += `üìû Telefone: ${data.telefone}\n`;
                            if (data.comodidades && Array.isArray(data.comodidades)) {
                                response += `‚ú® Comodidades: ${data.comodidades.join(', ')}\n`;
                            }
                            if (data.dicas) response += `üí° Dicas: ${data.dicas}\n`;
                            break;
                            if (data.preco_diaria) response += `ÔøΩ ${data.preco_diaria}\n`;
                            break;
                            
                        case 'transporte':
                            response += `ÔøΩ **${data.tipo || 'Transporte'}**\n`;
                            if (data.descricao) response += `üìù ${data.descricao.substring(0, 80)}...\n`;
                            if (data.preco) response += `ÔøΩ ${data.preco}\n`;
                            break;
                            
                        case 'cop30':
                            if (Array.isArray(data)) {
                                const cop30Info = data[0];
                                response += `üåç **COP 30 em Bel√©m**\n`;
                                if (cop30Info.data) response += `ÔøΩ ${cop30Info.data}\n`;
                                if (cop30Info.local_principal) response += `ÔøΩ ${cop30Info.local_principal}\n`;
                            }
                            break;
                            
                        default:
                            response += `‚ÑπÔ∏è **${data.nome || 'Informa√ß√£o'}**\n`;
                            if (data.descricao) response += `üìù ${data.descricao.substring(0, 100)}\n`;
                            break;
                    }
                    
                    // Separador entre resultados
                    if (index < processedResults.length - 1) {
                        response += '\n---\n\n';
                    }
                    
                } catch (itemError) {
                    console.warn('Erro ao processar item:', itemError);
                    // Continua processando outros itens
                }
            });
            
            // Adiciona nota sobre mais resultados
            if (results.length > maxResults) {
                response += `\n\nüí¨ *Encontrei mais ${results.length - maxResults} op√ß√µes adicionais. Para ver outras sugest√µes, fa√ßa uma pergunta mais espec√≠fica ou me diga que tipo de experi√™ncia voc√™ procura!*`;
            }
            
            response += `\n\nüîó *Todos os links do Google Maps s√£o clic√°veis para facilitar sua navega√ß√£o!*`;
            
            return response.trim() ? response : null;
            
        } catch (error) {
            console.error('Erro ao formatar resposta local:', error);
            return null;
        }
    };

    const callGeminiAPI = async (message, localData = null) => {
        if (!API_KEY) {
            throw new Error('API Key n√£o configurada');
        }
        
        try {
            // Enriquece o prompt com dados locais se dispon√≠veis
            let enhancedPrompt = SYSTEM_PROMPT;
            if (localData) {
                enhancedPrompt += `\n\nDADOS LOCAIS DETALHADOS:\n${localData}\n\nIMPORTANTE: Use essas informa√ß√µes para dar uma resposta COMPLETA e DETALHADA. SEMPRE inclua:\n- Links dos locais (Google Maps quando dispon√≠vel)\n- Pre√ßos espec√≠ficos\n- Hor√°rios de funcionamento\n- Dicas √∫teis\n- M√∫ltiplas op√ß√µes quando poss√≠vel\n- Informa√ß√µes de contato quando relevantes\n- Endere√ßos completos\nSeja informativo mas amig√°vel, como um guia tur√≠stico local experiente.`;
            }
            
            const requestBody = {
                contents: [{
                    parts: [{
                        text: `${enhancedPrompt}\n\nPergunta do usu√°rio: ${message}`
                    }]
                }],
                generationConfig: {
                    maxOutputTokens: localData ? 250 : 180, // Mais tokens para respostas completas com links
                    temperature: 0.7, // Mais criativo para respostas elaboradas
                    topP: 0.8,
                    topK: 40
                }
            };
            
            const response = await fetch(`${API_ENDPOINT}?key=${API_KEY}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestBody)
            });
            
            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            
            if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
                throw new Error('Resposta inv√°lida da API');
            }

            return data.candidates[0].content.parts[0].text;
        } catch (error) {
            throw error;
        }
    };

    const addMessage = (message, isUser = false) => {
        if (!chatContainer) return;
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `chat-message ${isUser ? 'user-message' : 'bot-message'}`;
        
        const messageContent = document.createElement('div');
        messageContent.className = 'message-content';
        
        // Processa formata√ß√£o de texto: converte \n em quebras de linha e ** em negrito
        const formattedMessage = message
            .replace(/\n/g, '<br>')
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
        
        messageContent.innerHTML = formattedMessage;
        
        const messageTime = document.createElement('div');
        messageTime.className = 'message-time';
        messageTime.textContent = new Date().toLocaleTimeString('pt-BR', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
        
        messageDiv.appendChild(messageContent);
        messageDiv.appendChild(messageTime);
        
        const messagesContainer = chatContainer.querySelector('.chat-messages');
        messagesContainer.appendChild(messageDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    };

    const handleUserMessage = async (message) => {
        if (!message.trim()) return;
        
        // Rate limiting para evitar spam
        const now = Date.now();
        if (now - lastRequestTime < RATE_LIMIT_MS) {
            addMessage('‚è≥ Aguarde um momento antes de enviar outra mensagem...', false);
            return;
        }
        lastRequestTime = now;
        
        addMessage(message, true);
        
        // Mostra indicador de digita√ß√£o
        const typingDiv = document.createElement('div');
        typingDiv.className = 'chat-message bot-message typing-indicator';
        typingDiv.innerHTML = '<div class="message-content"><i class="fa-solid fa-comment-dots"></i> Oraculum est√° consultando a base de dados...</div>';
        
        const messagesContainer = chatContainer.querySelector('.chat-messages');
        messagesContainer.appendChild(typingDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
        
        // Simula tempo de "processamento" para melhor UX
        setTimeout(async () => {
            try {
                // 1. Carrega a base de dados local com fallback
                let database;
                try {
                    database = await loadLocalDatabase();
                } catch (dbError) {
                    console.warn('Erro ao carregar base de dados local:', dbError);
                    database = window.localDatabase || null;
                }
                
                // 2. Busca por dados locais relevantes com prote√ß√£o
                let localResults = null;
                if (database) {
                    try {
                        localResults = searchLocalData(message, database);
                    } catch (searchError) {
                        console.warn('Erro na busca de dados locais:', searchError);
                        localResults = null;
                    }
                }
                
                // 3. Se encontrou dados locais, processa com seguran√ßa
                if (localResults && Array.isArray(localResults) && localResults.length > 0) {
                    console.log('üìã Usando dados locais espec√≠ficos:', localResults.length, 'resultados');
                    
                    let localResponse;
                    try {
                        localResponse = formatLocalDataResponse(localResults);
                    } catch (formatError) {
                        console.warn('Erro ao formatar dados locais:', formatError);
                        localResponse = null;
                    }
                    
                    if (localResponse && localResponse.trim()) {
                        // Tenta enriquecer com IA (opcional)
                        try {
                            const aiResponse = await callGeminiAPI(message, localResponse);
                            if (aiResponse && aiResponse.trim()) {
                                messagesContainer.removeChild(typingDiv);
                                addMessage(aiResponse, false);
                                messageHistory.push({ user: message, bot: aiResponse });
                                return;
                            }
                        } catch (aiError) {
                            console.log('IA falhou, usando apenas dados locais:', aiError.message);
                        }
                        
                        // Usa dados locais como backup
                        messagesContainer.removeChild(typingDiv);
                        addMessage(localResponse + '\n\nüí° *Informa√ß√µes da nossa base de dados local de Bel√©m*', false);
                        messageHistory.push({ user: message, bot: localResponse });
                        return;
                    }
                }
                
                // 4. Fallback: tenta IA sozinha
                try {
                    const response = await callGeminiAPI(message);
                    if (response && response.trim()) {
                        messagesContainer.removeChild(typingDiv);
                        addMessage(response, false);
                        messageHistory.push({ user: message, bot: response });
                        return;
                    }
                } catch (aiError) {
                    console.log('API falhou:', aiError.message);
                }
                
                // 5. √öltimo recurso: resposta padr√£o
                const fallbackResponse = getFallbackResponse(message);
                messagesContainer.removeChild(typingDiv);
                addMessage(fallbackResponse, false);
                messageHistory.push({ user: message, bot: fallbackResponse });
                
                // Mant√©m hist√≥rico limitado
                if (messageHistory.length > 10) {
                    messageHistory = messageHistory.slice(-10);
                }
                
            } catch (error) {
                console.error('Erro geral no handleUserMessage:', error);
                
                // Remove indicador de digita√ß√£o com seguran√ßa
                try {
                    if (typingDiv && typingDiv.parentNode) {
                        messagesContainer.removeChild(typingDiv);
                    }
                } catch (removeError) {
                    console.warn('N√£o foi poss√≠vel remover indicador de digita√ß√£o:', removeError);
                }
                
                // Resposta de erro mais informativa
                const errorResponse = 'ü§ñ **Sistema Temporariamente Indispon√≠vel**\n\nüòî Ocorreu um problema t√©cnico, mas voc√™ pode tentar:\n\n‚Ä¢ Reformular sua pergunta\n‚Ä¢ Perguntar sobre pontos tur√≠sticos de Bel√©m\n‚Ä¢ Solicitar informa√ß√µes sobre restaurantes\n‚Ä¢ Questionar sobre a COP 30\n\nüí° *O sistema ser√° restabelecido automaticamente.*';
                addMessage(errorResponse, false);
                messageHistory.push({ user: message, bot: errorResponse });
            }
        }, 1000 + Math.random() * 1000); // 1-2 segundos de delay real√≠stico
    };

    const initChatInterface = (targetContainer = null) => {
        // Se targetContainer √© fornecido, usar ele; sen√£o usar o modal (compatibilidade)
        const container = targetContainer || UIModule.elements.itemListContainer;
        
        if (targetContainer) {
            // Modo card principal
            container.innerHTML = '';
            
            chatContainer = document.createElement('div');
            chatContainer.className = 'chat-container-principal';
        } else {
            // Modo modal (para outros m√≥dulos se necess√°rio)
            container.innerHTML = '';
            
            chatContainer = document.createElement('div');
            chatContainer.className = 'chat-container';
        }
        
        const currentLang = LanguageModule.getCurrentLang();
        const headerText = getTranslatedText('Oraculum AI - Especialista em Bel√©m', currentLang);
        const placeholderText = getTranslatedText('Digite sua pergunta sobre Bel√©m...', currentLang);
        
        chatContainer.innerHTML = `
            <div class="chat-header">
                <i class="fa-solid fa-robot"></i>
                <span class="chat-header-text">${headerText}</span>
            </div>
            <div class="chat-messages">
                <div class="chat-message bot-message welcome-message">
                    <div class="message-content">
                        ü§ñ <strong>Ol√°! Sou o Oraculum AI</strong><br><br>
                        Seu assistente especialista em <strong>Bel√©m do Par√°</strong> e <strong>COP 30</strong>! 
                        <br><br>
                        ‚ÑπÔ∏è <em>Modo demonstra√ß√£o - Respostas baseadas em conhecimento local</em><br><br>
                        üìç <strong>Posso te ajudar com:</strong><br>
                        ‚Ä¢ Pontos tur√≠sticos e atra√ß√µes<br>
                        ‚Ä¢ Restaurantes e culin√°ria paraense<br>
                        ‚Ä¢ Hot√©is e hospedagem<br>
                        ‚Ä¢ Transporte na cidade<br>
                        ‚Ä¢ Informa√ß√µes sobre COP 30<br>
                        ‚Ä¢ Dicas de seguran√ßa<br>
                        <br>
                        üí¨ <strong>Digite sua pergunta abaixo!</strong><br>
                        <em>Ex: "Onde posso almo√ßar?" ou "O que visitar em Bel√©m?"</em>
                    </div>
                </div>
            </div>
            <div class="chat-input-container">
                <input type="text" class="chat-input" placeholder="${placeholderText}" maxlength="200">
                <button class="chat-send-btn"><i class="fa-solid fa-paper-plane"></i></button>
            </div>
        `;
        
        container.appendChild(chatContainer);
        
        // Eventos
        const input = chatContainer.querySelector('.chat-input');
        const sendBtn = chatContainer.querySelector('.chat-send-btn');
        
        const sendMessage = () => {
            const message = input.value.trim();
            if (message) {
                handleUserMessage(message);
                input.value = '';
            }
        };
        
        sendBtn.addEventListener('click', sendMessage);
        input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
        
        // Foco autom√°tico no input
        setTimeout(() => input.focus(), 100);
    };

    const clearChatInterface = () => {
        if (chatContainer) {
            chatContainer = null;
        }
        messageHistory = [];
    };

    // Fun√ß√£o para tradu√ß√£o de textos do chatbot
    const getTranslatedText = (text, lang) => {
        const translations = {
            'pt': {
                'Oraculum AI - Especialista em Bel√©m': 'Oraculum AI - Especialista em Bel√©m',
                'Digite sua pergunta sobre Bel√©m...': 'Digite sua pergunta sobre Bel√©m...'
            },
            'en': {
                'Oraculum AI - Especialista em Bel√©m': 'Oraculum AI - Bel√©m Expert',
                'Digite sua pergunta sobre Bel√©m...': 'Type your question about Bel√©m...'
            },
            'es': {
                'Oraculum AI - Especialista em Bel√©m': 'Oraculum AI - Experto en Bel√©m',
                'Digite sua pergunta sobre Bel√©m...': 'Escribe tu pregunta sobre Bel√©m...'
            }
        };
        
        return translations[lang] && translations[lang][text] ? translations[lang][text] : text;
    };

    // Fun√ß√£o para atualizar idioma do chat
    const updateChatLanguage = (targetLang) => {
        if (chatContainer) {
            const headerElement = chatContainer.querySelector('.chat-header-text');
            const inputElement = chatContainer.querySelector('.chat-input');
            
            if (headerElement) {
                headerElement.textContent = getTranslatedText('Oraculum AI - Especialista em Bel√©m', targetLang);
            }
            
            if (inputElement) {
                inputElement.placeholder = getTranslatedText('Digite sua pergunta sobre Bel√©m...', targetLang);
            }
        }
    };

    // Inicializa√ß√£o do ChatbotModule
    const init = async () => {
        console.log('ü§ñ Inicializando Oraculum AI...');
        // Pr√©-carrega a base de dados local
        await loadLocalDatabase();
    };

    return {
        init,
        initChatInterface,
        clearChatInterface,
        updateChatLanguage
    };
})();

// ===========================================
// INICIALIZA√á√ÉO DA APLICA√á√ÉO
// ===========================================
const AppModule = (() => {
    const init = async () => {
        try {
            EventModule.init();
            await ChatbotModule.init(); // Inicializa o sistema de dados locais
            await CardModule.render();
        } catch (e) {
            console.error('Erro fatal na inicializa√ß√£o:', e);
            UIModule.showError('Ocorreu um erro inesperado ao iniciar a aplica√ß√£o.');
        }
    };
    return {
        init
    };
})();

// Inicializar quando DOM estiver carregado
document.addEventListener('DOMContentLoaded', AppModule.init);


// ===========================================
// CSS ADICIONAL (para o conte√∫do din√¢mico do modal)
// ===========================================
// Para que tudo funcione em um √∫nico local, injetamos o CSS necess√°rio via JS.
// O ideal √© colocar isso no seu arquivo .css, mas para manter tudo aqui, fazemos assim:
const dynamicStyles = `
    .error-message {
        color: #ff8a8a;
        font-size: 1.2rem;
        text-align: center;
        padding: 40px;
    }
    .modal-item-list {
        margin-top: 20px;
    }
    .item-card {
        background-color: var(--cor-fundo);
        border-radius: 10px;
        margin-bottom: 20px;
        display: flex;
        gap: 20px;
        padding: 15px;
        border: 1px solid var(--cor-superficie);
        align-items: center;
    }
    .item-card-image {
        width: 120px;
        height: 100px;
        object-fit: cover;
        border-radius: 8px;
        flex-shrink: 0;
    }
    .item-card-content {
        display: flex;
        flex-direction: column;
    }
    .item-card-title {
        font-size: 1.4rem;
        font-weight: 600;
        color: var(--cor-destaque);
        margin-bottom: 8px;
    }
    .item-card-description {
        font-size: 1rem;
        color: var(--cor-texto-secundario);
        line-height: 1.6;
        flex-grow: 1;
    }
    .item-card-link {
        color: var(--cor-primaria);
        text-decoration: none;
        font-weight: 600;
        margin-top: 10px;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }
    .item-card-link:hover {
        text-decoration: underline;
    }
    #loading-indicator {
        display: none; /* Inicia escondido */
        align-items: center;
        gap: 10px;
        font-size: 1.1rem;
    }
    
    /* Estilos do Chatbot */
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 500px;
        background: var(--cor-fundo);
        border: 2px solid var(--cor-primaria);
        border-radius: 15px;
        overflow: hidden;
        margin-top: 20px;
    }
    
    .chat-header {
        background: linear-gradient(135deg, var(--cor-primaria), var(--cor-secundaria));
        color: white;
        padding: 15px 20px;
        font-weight: 600;
        font-size: 1.1rem;
        display: flex;
        align-items: center;
        gap: 10px;
    }
    
    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 20px;
        display: flex;
        flex-direction: column;
        gap: 15px;
        background: rgba(255, 255, 255, 0.02);
    }
    
    .chat-message {
        display: flex;
        flex-direction: column;
        max-width: 80%;
    }
    
    .user-message {
        align-self: flex-end;
        align-items: flex-end;
    }
    
    .bot-message {
        align-self: flex-start;
        align-items: flex-start;
    }
    
    .welcome-message {
        max-width: 100%;
        align-self: center;
        text-align: center;
    }
    
    .message-content {
        padding: 12px 18px;
        border-radius: 18px;
        font-size: 1rem;
        line-height: 1.4;
        word-wrap: break-word;
    }
    
    .user-message .message-content {
        background: var(--cor-primaria);
        color: white;
        border-bottom-right-radius: 6px;
    }
    
    .bot-message .message-content {
        background: var(--cor-superficie);
        color: var(--cor-texto);
        border-bottom-left-radius: 6px;
    }
    
    .welcome-message .message-content {
        background: linear-gradient(135deg, var(--cor-primaria), var(--cor-secundaria));
        color: white;
        border-radius: 15px;
        font-size: 0.95rem;
    }
    
    .message-time {
        font-size: 0.8rem;
        color: var(--cor-texto-secundario);
        margin-top: 5px;
        padding: 0 5px;
    }
    
    .typing-indicator .message-content {
        background: var(--cor-superficie);
        color: var(--cor-texto-secundario);
        font-style: italic;
    }
    
    .chat-input-container {
        display: flex;
        padding: 15px 20px;
        gap: 10px;
        background: var(--cor-superficie);
        border-top: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .chat-input {
        flex: 1;
        padding: 12px 15px;
        border: 2px solid transparent;
        border-radius: 25px;
        background: var(--cor-fundo);
        color: var(--cor-texto);
        font-size: 1rem;
        outline: none;
        transition: all 0.3s ease;
    }
    
    .chat-input:focus {
        border-color: var(--cor-primaria);
        box-shadow: 0 0 0 3px rgba(38, 166, 154, 0.2);
    }
    
    .chat-send-btn {
        background: var(--cor-primaria);
        color: white;
        border: none;
        border-radius: 50%;
        width: 45px;
        height: 45px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .chat-send-btn:hover {
        background: var(--cor-secundaria);
        transform: scale(1.05);
    }
    
    .chat-send-btn:active {
        transform: scale(0.95);
    }
    
    /* Scrollbar personalizada para o chat */
    .chat-messages::-webkit-scrollbar {
        width: 8px;
    }
    
    .chat-messages::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 10px;
    }
    
    .chat-messages::-webkit-scrollbar-thumb {
        background: var(--cor-primaria);
        border-radius: 10px;
    }
    
    .chat-messages::-webkit-scrollbar-thumb:hover {
        background: var(--cor-secundaria);
    }
    
    /* Anima√ß√£o para as mensagens */
    .chat-message {
        animation: slideIn 0.3s ease-out;
    }
    
    @keyframes slideIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    /* Responsividade */
    @media (max-width: 768px) {
        .chat-container {
            height: 400px;
        }
        
        .chat-message {
            max-width: 90%;
        }
        
        .message-content {
            padding: 10px 14px;
            font-size: 0.95rem;
        }
    }
`;

const styleSheet = document.createElement("style");
styleSheet.innerText = dynamicStyles;
document.head.appendChild(styleSheet);